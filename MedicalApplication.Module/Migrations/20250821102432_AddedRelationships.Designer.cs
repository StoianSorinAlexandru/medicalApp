// <auto-generated />
using System;
using MedicalApplication.Module.BusinessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalApplication.Module.Migrations
{
    [DbContext(typeof(MedicalApplicationEFCoreDbContext))]
    [Migration("20250821102432_AddedRelationships")]
    partial class AddedRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("IDeferredDeletion", true)
                .HasAnnotation("IOptimisticLock", true)
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Proxies:ChangeTracking", true)
                .HasAnnotation("Proxies:CheckEquality", true)
                .HasAnnotation("Proxies:LazyLoading", false)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Event", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AlarmTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AllDay")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("GCRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsPostponed")
                        .HasColumnType("bit");

                    b.Property<int>("Label")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OptimisticLockField")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("RecurrenceInfoXml")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid?>("RecurrencePatternID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("RemindIn")
                        .HasColumnType("time");

                    b.Property<string>("ReminderInfoXml")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("StartOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RecurrencePatternID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.ReportDataV2", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DataTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GCRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsInplaceReport")
                        .HasColumnType("bit");

                    b.Property<int>("OptimisticLockField")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ParametersObjectTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PredefinedReportTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ReportDataV2");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Resource", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Color_Int")
                        .HasColumnType("int");

                    b.HasKey("Key");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("EventResource", b =>
                {
                    b.Property<Guid>("EventsID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResourcesKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventsID", "ResourcesKey");

                    b.HasIndex("ResourcesKey");

                    b.ToTable("EventResource");
                });

            modelBuilder.Entity("MedicalApplication.Module.BusinessObjects.Medic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SpecializareId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SpecializareId");

                    b.ToTable("Medici");
                });

            modelBuilder.Entity("MedicalApplication.Module.BusinessObjects.Pacient", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CNP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumarTelefon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Pacienti");
                });

            modelBuilder.Entity("MedicalApplication.Module.BusinessObjects.Programare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataOra")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PacientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecializareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicId");

                    b.HasIndex("PacientId");

                    b.HasIndex("SpecializareId");

                    b.ToTable("Programari");
                });

            modelBuilder.Entity("MedicalApplication.Module.BusinessObjects.Specializare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Denumire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specializari");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Event", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.Event", "RecurrencePattern")
                        .WithMany("RecurrenceEvents")
                        .HasForeignKey("RecurrencePatternID");

                    b.Navigation("RecurrencePattern");
                });

            modelBuilder.Entity("EventResource", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalApplication.Module.BusinessObjects.Medic", b =>
                {
                    b.HasOne("MedicalApplication.Module.BusinessObjects.Specializare", "Specializare")
                        .WithMany("MedicList")
                        .HasForeignKey("SpecializareId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Specializare");
                });

            modelBuilder.Entity("MedicalApplication.Module.BusinessObjects.Programare", b =>
                {
                    b.HasOne("MedicalApplication.Module.BusinessObjects.Medic", "Medic")
                        .WithMany()
                        .HasForeignKey("MedicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalApplication.Module.BusinessObjects.Pacient", "Pacient")
                        .WithMany()
                        .HasForeignKey("PacientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalApplication.Module.BusinessObjects.Specializare", "Specializare")
                        .WithMany()
                        .HasForeignKey("SpecializareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medic");

                    b.Navigation("Pacient");

                    b.Navigation("Specializare");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Event", b =>
                {
                    b.Navigation("RecurrenceEvents");
                });

            modelBuilder.Entity("MedicalApplication.Module.BusinessObjects.Specializare", b =>
                {
                    b.Navigation("MedicList");
                });
#pragma warning restore 612, 618
        }
    }
}
